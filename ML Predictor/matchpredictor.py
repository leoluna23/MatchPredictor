# -*- coding: utf-8 -*-
"""MatchPredictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/leoluna23/MatchPredictor/blob/main/MatchPredictor.ipynb
"""

import pandas as pd
matches = pd.read_csv("matches.csv", index_col=0)
matches.head()
matches.shape
38 * 20 * 2
matches["team"].value_counts()
matches['round'].value_counts()
matches.dtypes
matches['date'] = pd.to_datetime(matches['date'])
matches.dtypes
matches['venue_code'] = matches['venue'].astype('category').cat.codes
matches["opp_code"] = matches['opponent'].astype('category').cat.codes
matches['hour'] = matches['time'].str.replace(":.+", "", regex = True).astype("int")
matches['day_code'] = matches['date'].dt.dayofweek
matches['target'] = (matches['result'] == "W").astype('int')
matches
from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier(n_estimators=50, min_samples_split=10, random_state=1)
train = matches[matches['date'] < '2022-01-01']
test = matches[matches['date'] > '2022-01-01']
predictors = ['venue_code', 'opp_code', 'hour', 'day_code']
rf.fit(train[predictors], train['target'])
preds = rf.predict(test[predictors])
from sklearn.metrics import accuracy_score
acc = accuracy_score(test['target'], preds)
acc
combined = pd.DataFrame(dict(actual=test['target'], prediction=preds))
pd.crosstab(index=combined['actual'], columns=combined['prediction'])
from sklearn.metrics import precision_score
precision_score(test['target'], preds)
grouped_matches = matches.groupby('team')
group = grouped_matches.get_group('Manchester City')
group
def rolling_averages(group, col, new_cols):
  group = group.sort_values('date')
  rolling_stats = group[col].rolling(3, closed='left').mean()
  group[new_cols] = rolling_stats
  group = group.dropna(subset=new_cols)
  return group
cols = ['gf', 'ga','sh', 'sot', 'dist', 'fk', 'pk', 'pkatt']
new_cols = [f"{c}_rolling" for c in cols]
new_cols
rolling_averages(group, cols, new_cols)
matches_rolling = matches.groupby('team').apply(lambda x: rolling_averages(x, cols, new_cols))
matches_rolling = matches_rolling.droplevel('team')
matches_rolling.index = range(matches_rolling.shape[0])
matches_rolling
def make_predictions(data, predictors):
  train = data[data['date'] < '2022-01-01']
  test = data[data['date'] > '2022-01-01']
  rf.fit(train[predictors], train['target'])
  preds = rf.predict(test[predictors])
  combined = pd.DataFrame(dict(actual=test['target'], prediction=preds), index=test.index)
  precision = precision_score(test['target'], preds)
  return combined, precision
combined, precision = make_predictions(matches_rolling, predictors + new_cols)
precision
combined = combined.merge(matches_rolling[['date', 'team', 'opponent', 'result']], left_index=True, right_index=True)
class MissingDict(dict):
  __missing__ = lambda self, key: key

map_values = {
    "Brighton and Hove Albion": "Brighton",
    "Manchester United": "Manchester Utd",
    "Newcastle United": "Newcastle Utd",
    "Tottenham Hotspur": "Tottenham",
    "West Ham United": "West Ham",
    "Wolverhampton Wanderers": "Wolves"
}
mapping = MissingDict(**map_values)
combined["new_team"] = combined["team"].map(mapping)
merged = combined.merge(combined, left_on=["date", "new_team"], right_on = ["date", "opponent"])
merged
merged[(merged["prediction_x"] == 1) & (merged["prediction_y"] == 0)]["actual_x"].value_counts()
combined

# @title date vs count()

from matplotlib import pyplot as plt
import seaborn as sns
def _plot_series(series, series_name, series_index=0):
  palette = list(sns.palettes.mpl_palette('Dark2'))
  counted = (series['date']
                .value_counts()
              .reset_index(name='counts')
              .rename({'index': 'date'}, axis=1)
              .sort_values('date', ascending=True))
  xs = counted['date']
  ys = counted['counts']
  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = combined.sort_values('date', ascending=True)
for i, (series_name, series) in enumerate(df_sorted.groupby('result')):
  _plot_series(series, series_name, i)
  fig.legend(title='result', bbox_to_anchor=(1, 1), loc='upper left')
sns.despine(fig=fig, ax=ax)
plt.xlabel('date')
_ = plt.ylabel('count()')

